Terminals unused in grammar

   DIVIDE
   NE
   LT
   LE
   GE
   GT
   POINT
   AND
   OR
   NOT
   DIV
   MOD
   IN
   LBRACKET
   RBRACKET
   DOTDOT
   ARRAY
   CASE
   DOWNTO
   FILEFILE
   FUNCTION
   GOTO
   LABEL
   NIL
   OF
   PACKED
   PROCEDURE
   RECORD
   SET
   TYPE
   WHILE
   WITH


State 27 conflicts: 1 shift/reduce
State 36 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON prebegin statement DOT

    2 prebegin: variables
    3         | constants prebegin

    4 constants: CONST constant

    5 constant: constinst SEMICOLON constant
    6         | constinst SEMICOLON

    7 constinst: IDENTIFIER EQ NUMBER

    8 equalsNum: IDENTIFIER EQ NUMBER

    9 variables: VAR varSet

   10 varSet: varLine SEMICOLON
   11       | varLine SEMICOLON varSet

   12 varLine: varNames COLON varType

   13 varNames: IDENTIFIER COMMA varNames
   14         | IDENTIFIER

   15 varType: IDENTIFIER

   16 statement: BEGINBEGIN statement endpart
   17          | stateLine SEMICOLON statement
   18          | stateLine

   19 stateLine: IF expr THEN statement endif
   20          | forLoop
   21          | funcCall
   22          | assignment
   23          | repeatuntil

   24 repeatuntil: REPEAT statement UNTIL equalsNum

   25 funcCall: IDENTIFIER LPAREN expr RPAREN

   26 forLoop: FOR assignment TO IDENTIFIER DO statement

   27 endpart: SEMICOLON statement endpart
   28        | END

   29 endif: ELSE statement
   30      | /* empty */

   31 assignment: IDENTIFIER ASSIGN expr

   32 expr: MINUS term
   33     | expr MINUS term
   34     | expr PLUS term
   35     | term

   36 term: term TIMES factor
   37     | factor

   38 factor: LPAREN expr RPAREN
   39       | IDENTIFIER
   40       | NUMBER
   41       | STRING
   42       | funcCall


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 1 7 8 13 14 15 25 26 31 39
STRING (259) 41
NUMBER (260) 7 8 40
PLUS (261) 34
MINUS (262) 32 33
TIMES (263) 36
DIVIDE (264)
ASSIGN (265) 31
EQ (266) 7 8
NE (267)
LT (268)
LE (269)
GE (270)
GT (271)
POINT (272)
DOT (273) 1
AND (274)
OR (275)
NOT (276)
DIV (277)
MOD (278)
IN (279)
COMMA (280) 13
SEMICOLON (281) 1 5 6 10 11 17 27
COLON (282) 12
LPAREN (283) 1 25 38
RPAREN (284) 1 25 38
LBRACKET (285)
RBRACKET (286)
DOTDOT (287)
ARRAY (288)
BEGINBEGIN (289) 16
CASE (290)
CONST (291) 4
DO (292) 26
DOWNTO (293)
ELSE (294) 29
END (295) 28
FILEFILE (296)
FOR (297) 26
FUNCTION (298)
GOTO (299)
IF (300) 19
LABEL (301)
NIL (302)
OF (303)
PACKED (304)
PROCEDURE (305)
PROGRAM (306) 1
RECORD (307)
REPEAT (308) 24
SET (309)
THEN (310) 19
TO (311) 26
TYPE (312)
UNTIL (313) 24
VAR (314) 9
WHILE (315)
WITH (316)


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
program (63)
    on left: 1, on right: 0
prebegin (64)
    on left: 2 3, on right: 1 3
constants (65)
    on left: 4, on right: 3
constant (66)
    on left: 5 6, on right: 4 5
constinst (67)
    on left: 7, on right: 5 6
equalsNum (68)
    on left: 8, on right: 24
variables (69)
    on left: 9, on right: 2
varSet (70)
    on left: 10 11, on right: 9 11
varLine (71)
    on left: 12, on right: 10 11
varNames (72)
    on left: 13 14, on right: 12 13
varType (73)
    on left: 15, on right: 12
statement (74)
    on left: 16 17 18, on right: 1 16 17 19 24 26 27 29
stateLine (75)
    on left: 19 20 21 22 23, on right: 17 18
repeatuntil (76)
    on left: 24, on right: 23
funcCall (77)
    on left: 25, on right: 21 42
forLoop (78)
    on left: 26, on right: 20
endpart (79)
    on left: 27 28, on right: 16 27
endif (80)
    on left: 29 30, on right: 19
assignment (81)
    on left: 31, on right: 22 26
expr (82)
    on left: 32 33 34 35, on right: 19 25 31 33 34 38
term (83)
    on left: 36 37, on right: 32 33 34 35 36
factor (84)
    on left: 38 39 40 41 42, on right: 36 37


state 0

    0 $accept: . program $end
    1 program: . PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON prebegin statement DOT

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PROGRAM . IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON prebegin statement DOT

    IDENTIFIER  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: PROGRAM IDENTIFIER . LPAREN IDENTIFIER RPAREN SEMICOLON prebegin statement DOT

    LPAREN  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: PROGRAM IDENTIFIER LPAREN . IDENTIFIER RPAREN SEMICOLON prebegin statement DOT

    IDENTIFIER  shift, and go to state 6


state 6

    1 program: PROGRAM IDENTIFIER LPAREN IDENTIFIER . RPAREN SEMICOLON prebegin statement DOT

    RPAREN  shift, and go to state 7


state 7

    1 program: PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN . SEMICOLON prebegin statement DOT

    SEMICOLON  shift, and go to state 8


state 8

    1 program: PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON . prebegin statement DOT
    2 prebegin: . variables
    3         | . constants prebegin
    4 constants: . CONST constant
    9 variables: . VAR varSet

    CONST  shift, and go to state 9
    VAR    shift, and go to state 10

    prebegin   go to state 11
    constants  go to state 12
    variables  go to state 13


state 9

    4 constants: CONST . constant
    5 constant: . constinst SEMICOLON constant
    6         | . constinst SEMICOLON
    7 constinst: . IDENTIFIER EQ NUMBER

    IDENTIFIER  shift, and go to state 14

    constant   go to state 15
    constinst  go to state 16


state 10

    9 variables: VAR . varSet
   10 varSet: . varLine SEMICOLON
   11       | . varLine SEMICOLON varSet
   12 varLine: . varNames COLON varType
   13 varNames: . IDENTIFIER COMMA varNames
   14         | . IDENTIFIER

    IDENTIFIER  shift, and go to state 17

    varSet    go to state 18
    varLine   go to state 19
    varNames  go to state 20


state 11

    1 program: PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON prebegin . statement DOT
   16 statement: . BEGINBEGIN statement endpart
   17          | . stateLine SEMICOLON statement
   18          | . stateLine
   19 stateLine: . IF expr THEN statement endif
   20          | . forLoop
   21          | . funcCall
   22          | . assignment
   23          | . repeatuntil
   24 repeatuntil: . REPEAT statement UNTIL equalsNum
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   26 forLoop: . FOR assignment TO IDENTIFIER DO statement
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 21
    BEGINBEGIN  shift, and go to state 22
    FOR         shift, and go to state 23
    IF          shift, and go to state 24
    REPEAT      shift, and go to state 25

    statement    go to state 26
    stateLine    go to state 27
    repeatuntil  go to state 28
    funcCall     go to state 29
    forLoop      go to state 30
    assignment   go to state 31


state 12

    2 prebegin: . variables
    3         | . constants prebegin
    3         | constants . prebegin
    4 constants: . CONST constant
    9 variables: . VAR varSet

    CONST  shift, and go to state 9
    VAR    shift, and go to state 10

    prebegin   go to state 32
    constants  go to state 12
    variables  go to state 13


state 13

    2 prebegin: variables .

    $default  reduce using rule 2 (prebegin)


state 14

    7 constinst: IDENTIFIER . EQ NUMBER

    EQ  shift, and go to state 33


state 15

    4 constants: CONST constant .

    $default  reduce using rule 4 (constants)


state 16

    5 constant: constinst . SEMICOLON constant
    6         | constinst . SEMICOLON

    SEMICOLON  shift, and go to state 34


state 17

   13 varNames: IDENTIFIER . COMMA varNames
   14         | IDENTIFIER .  [COLON]

    COMMA  shift, and go to state 35

    $default  reduce using rule 14 (varNames)


state 18

    9 variables: VAR varSet .

    $default  reduce using rule 9 (variables)


state 19

   10 varSet: varLine . SEMICOLON
   11       | varLine . SEMICOLON varSet

    SEMICOLON  shift, and go to state 36


state 20

   12 varLine: varNames . COLON varType

    COLON  shift, and go to state 37


state 21

   25 funcCall: IDENTIFIER . LPAREN expr RPAREN
   31 assignment: IDENTIFIER . ASSIGN expr

    ASSIGN  shift, and go to state 38
    LPAREN  shift, and go to state 39


state 22

   16 statement: . BEGINBEGIN statement endpart
   16          | BEGINBEGIN . statement endpart
   17          | . stateLine SEMICOLON statement
   18          | . stateLine
   19 stateLine: . IF expr THEN statement endif
   20          | . forLoop
   21          | . funcCall
   22          | . assignment
   23          | . repeatuntil
   24 repeatuntil: . REPEAT statement UNTIL equalsNum
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   26 forLoop: . FOR assignment TO IDENTIFIER DO statement
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 21
    BEGINBEGIN  shift, and go to state 22
    FOR         shift, and go to state 23
    IF          shift, and go to state 24
    REPEAT      shift, and go to state 25

    statement    go to state 40
    stateLine    go to state 27
    repeatuntil  go to state 28
    funcCall     go to state 29
    forLoop      go to state 30
    assignment   go to state 31


state 23

   26 forLoop: FOR . assignment TO IDENTIFIER DO statement
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 41

    assignment  go to state 42


state 24

   19 stateLine: IF . expr THEN statement endif
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   32 expr: . MINUS term
   33     | . expr MINUS term
   34     | . expr PLUS term
   35     | . term
   36 term: . term TIMES factor
   37     | . factor
   38 factor: . LPAREN expr RPAREN
   39       | . IDENTIFIER
   40       | . NUMBER
   41       | . STRING
   42       | . funcCall

    IDENTIFIER  shift, and go to state 43
    STRING      shift, and go to state 44
    NUMBER      shift, and go to state 45
    MINUS       shift, and go to state 46
    LPAREN      shift, and go to state 47

    funcCall  go to state 48
    expr      go to state 49
    term      go to state 50
    factor    go to state 51


state 25

   16 statement: . BEGINBEGIN statement endpart
   17          | . stateLine SEMICOLON statement
   18          | . stateLine
   19 stateLine: . IF expr THEN statement endif
   20          | . forLoop
   21          | . funcCall
   22          | . assignment
   23          | . repeatuntil
   24 repeatuntil: . REPEAT statement UNTIL equalsNum
   24            | REPEAT . statement UNTIL equalsNum
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   26 forLoop: . FOR assignment TO IDENTIFIER DO statement
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 21
    BEGINBEGIN  shift, and go to state 22
    FOR         shift, and go to state 23
    IF          shift, and go to state 24
    REPEAT      shift, and go to state 25

    statement    go to state 52
    stateLine    go to state 27
    repeatuntil  go to state 28
    funcCall     go to state 29
    forLoop      go to state 30
    assignment   go to state 31


state 26

    1 program: PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON prebegin statement . DOT

    DOT  shift, and go to state 53


state 27

   17 statement: stateLine . SEMICOLON statement
   18          | stateLine .  [DOT, SEMICOLON, ELSE, END, UNTIL]

    SEMICOLON  shift, and go to state 54

    SEMICOLON  [reduce using rule 18 (statement)]
    $default   reduce using rule 18 (statement)


state 28

   23 stateLine: repeatuntil .

    $default  reduce using rule 23 (stateLine)


state 29

   21 stateLine: funcCall .

    $default  reduce using rule 21 (stateLine)


state 30

   20 stateLine: forLoop .

    $default  reduce using rule 20 (stateLine)


state 31

   22 stateLine: assignment .

    $default  reduce using rule 22 (stateLine)


state 32

    3 prebegin: constants prebegin .

    $default  reduce using rule 3 (prebegin)


state 33

    7 constinst: IDENTIFIER EQ . NUMBER

    NUMBER  shift, and go to state 55


state 34

    5 constant: . constinst SEMICOLON constant
    5         | constinst SEMICOLON . constant
    6         | . constinst SEMICOLON
    6         | constinst SEMICOLON .  [CONST, VAR]
    7 constinst: . IDENTIFIER EQ NUMBER

    IDENTIFIER  shift, and go to state 14

    $default  reduce using rule 6 (constant)

    constant   go to state 56
    constinst  go to state 16


state 35

   13 varNames: . IDENTIFIER COMMA varNames
   13         | IDENTIFIER COMMA . varNames
   14         | . IDENTIFIER

    IDENTIFIER  shift, and go to state 17

    varNames  go to state 57


state 36

   10 varSet: . varLine SEMICOLON
   10       | varLine SEMICOLON .  [IDENTIFIER, BEGINBEGIN, FOR, IF, REPEAT]
   11       | . varLine SEMICOLON varSet
   11       | varLine SEMICOLON . varSet
   12 varLine: . varNames COLON varType
   13 varNames: . IDENTIFIER COMMA varNames
   14         | . IDENTIFIER

    IDENTIFIER  shift, and go to state 17

    IDENTIFIER  [reduce using rule 10 (varSet)]
    $default    reduce using rule 10 (varSet)

    varSet    go to state 58
    varLine   go to state 19
    varNames  go to state 20


state 37

   12 varLine: varNames COLON . varType
   15 varType: . IDENTIFIER

    IDENTIFIER  shift, and go to state 59

    varType  go to state 60


state 38

   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   31 assignment: IDENTIFIER ASSIGN . expr
   32 expr: . MINUS term
   33     | . expr MINUS term
   34     | . expr PLUS term
   35     | . term
   36 term: . term TIMES factor
   37     | . factor
   38 factor: . LPAREN expr RPAREN
   39       | . IDENTIFIER
   40       | . NUMBER
   41       | . STRING
   42       | . funcCall

    IDENTIFIER  shift, and go to state 43
    STRING      shift, and go to state 44
    NUMBER      shift, and go to state 45
    MINUS       shift, and go to state 46
    LPAREN      shift, and go to state 47

    funcCall  go to state 48
    expr      go to state 61
    term      go to state 50
    factor    go to state 51


state 39

   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   25         | IDENTIFIER LPAREN . expr RPAREN
   32 expr: . MINUS term
   33     | . expr MINUS term
   34     | . expr PLUS term
   35     | . term
   36 term: . term TIMES factor
   37     | . factor
   38 factor: . LPAREN expr RPAREN
   39       | . IDENTIFIER
   40       | . NUMBER
   41       | . STRING
   42       | . funcCall

    IDENTIFIER  shift, and go to state 43
    STRING      shift, and go to state 44
    NUMBER      shift, and go to state 45
    MINUS       shift, and go to state 46
    LPAREN      shift, and go to state 47

    funcCall  go to state 48
    expr      go to state 62
    term      go to state 50
    factor    go to state 51


state 40

   16 statement: BEGINBEGIN statement . endpart
   27 endpart: . SEMICOLON statement endpart
   28        | . END

    SEMICOLON  shift, and go to state 63
    END        shift, and go to state 64

    endpart  go to state 65


state 41

   31 assignment: IDENTIFIER . ASSIGN expr

    ASSIGN  shift, and go to state 38


state 42

   26 forLoop: FOR assignment . TO IDENTIFIER DO statement

    TO  shift, and go to state 66


state 43

   25 funcCall: IDENTIFIER . LPAREN expr RPAREN
   39 factor: IDENTIFIER .  [PLUS, MINUS, TIMES, DOT, SEMICOLON, RPAREN, ELSE, END, THEN, TO, UNTIL]

    LPAREN  shift, and go to state 39

    $default  reduce using rule 39 (factor)


state 44

   41 factor: STRING .

    $default  reduce using rule 41 (factor)


state 45

   40 factor: NUMBER .

    $default  reduce using rule 40 (factor)


state 46

   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   32 expr: MINUS . term
   36 term: . term TIMES factor
   37     | . factor
   38 factor: . LPAREN expr RPAREN
   39       | . IDENTIFIER
   40       | . NUMBER
   41       | . STRING
   42       | . funcCall

    IDENTIFIER  shift, and go to state 43
    STRING      shift, and go to state 44
    NUMBER      shift, and go to state 45
    LPAREN      shift, and go to state 47

    funcCall  go to state 48
    term      go to state 67
    factor    go to state 51


state 47

   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   32 expr: . MINUS term
   33     | . expr MINUS term
   34     | . expr PLUS term
   35     | . term
   36 term: . term TIMES factor
   37     | . factor
   38 factor: . LPAREN expr RPAREN
   38       | LPAREN . expr RPAREN
   39       | . IDENTIFIER
   40       | . NUMBER
   41       | . STRING
   42       | . funcCall

    IDENTIFIER  shift, and go to state 43
    STRING      shift, and go to state 44
    NUMBER      shift, and go to state 45
    MINUS       shift, and go to state 46
    LPAREN      shift, and go to state 47

    funcCall  go to state 48
    expr      go to state 68
    term      go to state 50
    factor    go to state 51


state 48

   42 factor: funcCall .

    $default  reduce using rule 42 (factor)


state 49

   19 stateLine: IF expr . THEN statement endif
   33 expr: expr . MINUS term
   34     | expr . PLUS term

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    THEN   shift, and go to state 71


state 50

   35 expr: term .  [PLUS, MINUS, DOT, SEMICOLON, RPAREN, ELSE, END, THEN, TO, UNTIL]
   36 term: term . TIMES factor

    TIMES  shift, and go to state 72

    $default  reduce using rule 35 (expr)


state 51

   37 term: factor .

    $default  reduce using rule 37 (term)


state 52

   24 repeatuntil: REPEAT statement . UNTIL equalsNum

    UNTIL  shift, and go to state 73


state 53

    1 program: PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON prebegin statement DOT .

    $default  reduce using rule 1 (program)


state 54

   16 statement: . BEGINBEGIN statement endpart
   17          | . stateLine SEMICOLON statement
   17          | stateLine SEMICOLON . statement
   18          | . stateLine
   19 stateLine: . IF expr THEN statement endif
   20          | . forLoop
   21          | . funcCall
   22          | . assignment
   23          | . repeatuntil
   24 repeatuntil: . REPEAT statement UNTIL equalsNum
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   26 forLoop: . FOR assignment TO IDENTIFIER DO statement
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 21
    BEGINBEGIN  shift, and go to state 22
    FOR         shift, and go to state 23
    IF          shift, and go to state 24
    REPEAT      shift, and go to state 25

    statement    go to state 74
    stateLine    go to state 27
    repeatuntil  go to state 28
    funcCall     go to state 29
    forLoop      go to state 30
    assignment   go to state 31


state 55

    7 constinst: IDENTIFIER EQ NUMBER .

    $default  reduce using rule 7 (constinst)


state 56

    5 constant: constinst SEMICOLON constant .

    $default  reduce using rule 5 (constant)


state 57

   13 varNames: IDENTIFIER COMMA varNames .

    $default  reduce using rule 13 (varNames)


state 58

   11 varSet: varLine SEMICOLON varSet .

    $default  reduce using rule 11 (varSet)


state 59

   15 varType: IDENTIFIER .

    $default  reduce using rule 15 (varType)


state 60

   12 varLine: varNames COLON varType .

    $default  reduce using rule 12 (varLine)


state 61

   31 assignment: IDENTIFIER ASSIGN expr .  [DOT, SEMICOLON, ELSE, END, TO, UNTIL]
   33 expr: expr . MINUS term
   34     | expr . PLUS term

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70

    $default  reduce using rule 31 (assignment)


state 62

   25 funcCall: IDENTIFIER LPAREN expr . RPAREN
   33 expr: expr . MINUS term
   34     | expr . PLUS term

    PLUS    shift, and go to state 69
    MINUS   shift, and go to state 70
    RPAREN  shift, and go to state 75


state 63

   16 statement: . BEGINBEGIN statement endpart
   17          | . stateLine SEMICOLON statement
   18          | . stateLine
   19 stateLine: . IF expr THEN statement endif
   20          | . forLoop
   21          | . funcCall
   22          | . assignment
   23          | . repeatuntil
   24 repeatuntil: . REPEAT statement UNTIL equalsNum
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   26 forLoop: . FOR assignment TO IDENTIFIER DO statement
   27 endpart: SEMICOLON . statement endpart
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 21
    BEGINBEGIN  shift, and go to state 22
    FOR         shift, and go to state 23
    IF          shift, and go to state 24
    REPEAT      shift, and go to state 25

    statement    go to state 76
    stateLine    go to state 27
    repeatuntil  go to state 28
    funcCall     go to state 29
    forLoop      go to state 30
    assignment   go to state 31


state 64

   28 endpart: END .

    $default  reduce using rule 28 (endpart)


state 65

   16 statement: BEGINBEGIN statement endpart .

    $default  reduce using rule 16 (statement)


state 66

   26 forLoop: FOR assignment TO . IDENTIFIER DO statement

    IDENTIFIER  shift, and go to state 77


state 67

   32 expr: MINUS term .  [PLUS, MINUS, DOT, SEMICOLON, RPAREN, ELSE, END, THEN, TO, UNTIL]
   36 term: term . TIMES factor

    TIMES  shift, and go to state 72

    $default  reduce using rule 32 (expr)


state 68

   33 expr: expr . MINUS term
   34     | expr . PLUS term
   38 factor: LPAREN expr . RPAREN

    PLUS    shift, and go to state 69
    MINUS   shift, and go to state 70
    RPAREN  shift, and go to state 78


state 69

   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   34 expr: expr PLUS . term
   36 term: . term TIMES factor
   37     | . factor
   38 factor: . LPAREN expr RPAREN
   39       | . IDENTIFIER
   40       | . NUMBER
   41       | . STRING
   42       | . funcCall

    IDENTIFIER  shift, and go to state 43
    STRING      shift, and go to state 44
    NUMBER      shift, and go to state 45
    LPAREN      shift, and go to state 47

    funcCall  go to state 48
    term      go to state 79
    factor    go to state 51


state 70

   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   33 expr: expr MINUS . term
   36 term: . term TIMES factor
   37     | . factor
   38 factor: . LPAREN expr RPAREN
   39       | . IDENTIFIER
   40       | . NUMBER
   41       | . STRING
   42       | . funcCall

    IDENTIFIER  shift, and go to state 43
    STRING      shift, and go to state 44
    NUMBER      shift, and go to state 45
    LPAREN      shift, and go to state 47

    funcCall  go to state 48
    term      go to state 80
    factor    go to state 51


state 71

   16 statement: . BEGINBEGIN statement endpart
   17          | . stateLine SEMICOLON statement
   18          | . stateLine
   19 stateLine: . IF expr THEN statement endif
   19          | IF expr THEN . statement endif
   20          | . forLoop
   21          | . funcCall
   22          | . assignment
   23          | . repeatuntil
   24 repeatuntil: . REPEAT statement UNTIL equalsNum
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   26 forLoop: . FOR assignment TO IDENTIFIER DO statement
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 21
    BEGINBEGIN  shift, and go to state 22
    FOR         shift, and go to state 23
    IF          shift, and go to state 24
    REPEAT      shift, and go to state 25

    statement    go to state 81
    stateLine    go to state 27
    repeatuntil  go to state 28
    funcCall     go to state 29
    forLoop      go to state 30
    assignment   go to state 31


state 72

   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   36 term: term TIMES . factor
   38 factor: . LPAREN expr RPAREN
   39       | . IDENTIFIER
   40       | . NUMBER
   41       | . STRING
   42       | . funcCall

    IDENTIFIER  shift, and go to state 43
    STRING      shift, and go to state 44
    NUMBER      shift, and go to state 45
    LPAREN      shift, and go to state 47

    funcCall  go to state 48
    factor    go to state 82


state 73

    8 equalsNum: . IDENTIFIER EQ NUMBER
   24 repeatuntil: REPEAT statement UNTIL . equalsNum

    IDENTIFIER  shift, and go to state 83

    equalsNum  go to state 84


state 74

   17 statement: stateLine SEMICOLON statement .

    $default  reduce using rule 17 (statement)


state 75

   25 funcCall: IDENTIFIER LPAREN expr RPAREN .

    $default  reduce using rule 25 (funcCall)


state 76

   27 endpart: . SEMICOLON statement endpart
   27        | SEMICOLON statement . endpart
   28        | . END

    SEMICOLON  shift, and go to state 63
    END        shift, and go to state 64

    endpart  go to state 85


state 77

   26 forLoop: FOR assignment TO IDENTIFIER . DO statement

    DO  shift, and go to state 86


state 78

   38 factor: LPAREN expr RPAREN .

    $default  reduce using rule 38 (factor)


state 79

   34 expr: expr PLUS term .  [PLUS, MINUS, DOT, SEMICOLON, RPAREN, ELSE, END, THEN, TO, UNTIL]
   36 term: term . TIMES factor

    TIMES  shift, and go to state 72

    $default  reduce using rule 34 (expr)


state 80

   33 expr: expr MINUS term .  [PLUS, MINUS, DOT, SEMICOLON, RPAREN, ELSE, END, THEN, TO, UNTIL]
   36 term: term . TIMES factor

    TIMES  shift, and go to state 72

    $default  reduce using rule 33 (expr)


state 81

   19 stateLine: IF expr THEN statement . endif
   29 endif: . ELSE statement
   30      | .  [DOT, SEMICOLON, ELSE, END, UNTIL]

    ELSE  shift, and go to state 87

    ELSE      [reduce using rule 30 (endif)]
    $default  reduce using rule 30 (endif)

    endif  go to state 88


state 82

   36 term: term TIMES factor .

    $default  reduce using rule 36 (term)


state 83

    8 equalsNum: IDENTIFIER . EQ NUMBER

    EQ  shift, and go to state 89


state 84

   24 repeatuntil: REPEAT statement UNTIL equalsNum .

    $default  reduce using rule 24 (repeatuntil)


state 85

   27 endpart: SEMICOLON statement endpart .

    $default  reduce using rule 27 (endpart)


state 86

   16 statement: . BEGINBEGIN statement endpart
   17          | . stateLine SEMICOLON statement
   18          | . stateLine
   19 stateLine: . IF expr THEN statement endif
   20          | . forLoop
   21          | . funcCall
   22          | . assignment
   23          | . repeatuntil
   24 repeatuntil: . REPEAT statement UNTIL equalsNum
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   26 forLoop: . FOR assignment TO IDENTIFIER DO statement
   26        | FOR assignment TO IDENTIFIER DO . statement
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 21
    BEGINBEGIN  shift, and go to state 22
    FOR         shift, and go to state 23
    IF          shift, and go to state 24
    REPEAT      shift, and go to state 25

    statement    go to state 90
    stateLine    go to state 27
    repeatuntil  go to state 28
    funcCall     go to state 29
    forLoop      go to state 30
    assignment   go to state 31


state 87

   16 statement: . BEGINBEGIN statement endpart
   17          | . stateLine SEMICOLON statement
   18          | . stateLine
   19 stateLine: . IF expr THEN statement endif
   20          | . forLoop
   21          | . funcCall
   22          | . assignment
   23          | . repeatuntil
   24 repeatuntil: . REPEAT statement UNTIL equalsNum
   25 funcCall: . IDENTIFIER LPAREN expr RPAREN
   26 forLoop: . FOR assignment TO IDENTIFIER DO statement
   29 endif: ELSE . statement
   31 assignment: . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 21
    BEGINBEGIN  shift, and go to state 22
    FOR         shift, and go to state 23
    IF          shift, and go to state 24
    REPEAT      shift, and go to state 25

    statement    go to state 91
    stateLine    go to state 27
    repeatuntil  go to state 28
    funcCall     go to state 29
    forLoop      go to state 30
    assignment   go to state 31


state 88

   19 stateLine: IF expr THEN statement endif .

    $default  reduce using rule 19 (stateLine)


state 89

    8 equalsNum: IDENTIFIER EQ . NUMBER

    NUMBER  shift, and go to state 92


state 90

   26 forLoop: FOR assignment TO IDENTIFIER DO statement .

    $default  reduce using rule 26 (forLoop)


state 91

   29 endif: ELSE statement .

    $default  reduce using rule 29 (endif)


state 92

    8 equalsNum: IDENTIFIER EQ NUMBER .

    $default  reduce using rule 8 (equalsNum)
